import { App, ExpressReceiver } from "@slack/bolt";
import axios from "axios";
import * as dotenv from "dotenv";

dotenv.config();

// ‚úÖ ExpressReceiver„Çí‰Ωø„Å£„Å¶ /slack/events „ÇíÂÖ¨Èñã
const receiver = new ExpressReceiver({
  signingSecret: process.env.SLACK_SIGNING_SECRET!,
  endpoints: "/slack/events", // „Åì„Çå„ÅåSlack„ÅÆÊ§úË®ºÂÖà
});

const baseUrl = process.env.MCP_CLIENT_URL;

const app = new App({
  token: process.env.SLACK_BOT_TOKEN!,
  receiver, // Slack Events „ÇíÂèó„ÅëÂèñ„Çã
});

// ‚úÖ „É°„ÉÉ„Çª„Éº„Ç∏„Ç§„Éô„É≥„Éà„ÅÆÂá¶ÁêÜ
app.message(async ({ message, say }) => {
  if (!("text" in message)) return;

  const userMessage = message.text;
  console.log("üì• Slack„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏:", userMessage);

  try {
    console.log("üì§ Mastra„Å´ÈÄÅ„Çã„É™„ÇØ„Ç®„Çπ„Éà:");
    console.log({
      messages: [{ role: "user", content: userMessage }]
    });

    const response = await axios.post(`${baseUrl}/api/agents/googleSpreadSheetMcpAgent/generate`, {
      messages: [{ role: "user", content: userMessage }]
    });

    console.log("üì• Mastra„Åã„Çâ„ÅÆ„É¨„Çπ„Éù„É≥„Çπ:", response.data.text);

    const reply = response.data.text || "„Åô„Åø„Åæ„Åõ„Çì„ÄÅ„ÅÜ„Åæ„ÅèËøîÁ≠î„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü";
    await say(reply);
  } catch (error: any) {
    console.error("‚ùå Mastra„Ç®„Éº„Ç∏„Çß„É≥„Éà„Å®„ÅÆÈÄö‰ø°„Å´Â§±Êïó:", error.message);
    if (error.response) {
      console.error("‚ùó status:", error.response.status);
      console.error("‚ùó body:", error.response.data);
    }
    await say("„Ç®„Éº„Ç∏„Çß„É≥„Éà„Å®„ÅÆÈÄö‰ø°„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ");
  }
});

// ‚úÖ „Çµ„Éº„Éê„ÉºËµ∑Âãï
(async () => {
  const port = 3000;
  await app.start(port);
  console.log(`‚ö°Ô∏è Slack bot is running on http://localhost:${port}`);
})();
